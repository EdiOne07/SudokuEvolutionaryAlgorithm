import copy
import random
from search import dfs

# medium boards have 36-38 filled cells.
medium_board_1 = [
    [0,2,0,0,0,0,0,3,1],
    [7,0,0,0,0,3,0,0,0],
    [0,0,0,1,4,0,2,9,0],
    [0,5,2,7,6,4,0,1,8],
    [0,6,3,0,1,2,7,5,9],
    [0,7,8,0,0,0,4,0,0],
    [2,0,0,3,7,0,0,0,5],
    [0,1,0,0,0,0,9,0,0],
    [5,4,0,0,8,1,0,0,0]]

medium_board_2 = [
    [0,0,9,0,0,0,0,0,7],
    [0,0,4,6,5,0,0,1,3],
    [3,0,6,0,0,7,0,0,0],
    [2,3,1,0,6,0,0,0,0],
    [8,0,5,3,0,0,0,6,0],
    [4,6,0,1,0,9,5,0,0],
    [0,0,0,2,9,6,0,0,5],
    [0,4,3,5,0,1,7,2,6],
    [0,5,0,7,0,0,8,0,1]
]

medium_board_3 = [
    [0,0,5,0,0,0,2,1,0],
    [1,9,6,2,8,4,7,5,3],
    [0,3,0,1,5,0,4,0,6],
    [3,0,8,0,0,0,0,5,0],
    [4,0,0,0,6,3,0,0,0],
    [5,0,1,9,2,0,3,7,4],
    [0,0,0,0,0,2,0,5,0],
    [0,5,0,0,3,0,0,6,0],
    [0,1,3,0,4,0,0,0,0]
]

# hard boards have 32 filled cells.
hard_board_1 = [
    [6,8,0,3,7,0,0,0,0],
    [3,0,7,0,0,1,0,6,0],
    [0,0,0,2,6,0,0,0,7],
    [0,0,0,5,0,0,0,0,0],
    [5,4,2,7,1,3,0,0,0],
    [0,0,0,2,0,0,5,4,0],
    [7,1,0,0,5,0,2,0,0],
    [0,5,9,6,0,7,0,0,4],
    [8,0,0,0,0,0,0,0,5]
]

hard_board_2 = [
    [0,3,1,0,7,4,8,0,0], 
    [6,0,0,0,0,0,3,0,0], 
    [4,5,0,3,0,0,0,9,0], 
    [2,0,4,0,0,0,7,5,0], 
    [7,6,0,4,2,0,0,0,0], 
    [0,0,0,9,0,7,4,0,0], 
    [0,0,0,0,3,0,0,0,0], 
    [3,8,9,5,4,2,0,0,0], 
    [0,0,0,0,9,0,0,3,8]
]

hard_board_3 = [
    [3,0,8,5,2,0,0,0,0],
    [0,5,2,0,0,0,6,0,8],
    [0,0,0,9,0,8,0,0,5],
    [0,0,3,0,0,0,0,0,4],
    [6,0,5,4,0,0,9,0,0],
    [4,1,0,0,8,5,0,0,7],
    [0,0,0,0,9,0,4,7,0],
    [0,0,0,0,4,0,0,0,0],
    [7,9,4,6,5,2,0,0,0]
]

# extreme boards have 22-23 filled cells.
extreme_board_1 = [
    [3,4,0,0,0,1,0,0,0],
    [0,2,0,0,0,9,0,0,0],
    [0,0,0,5,0,0,0,7,0],
    [0,0,0,0,0,3,1,0,7],
    [6,8,0,0,0,0,3,0,2],
    [0,0,0,0,0,0,0,6,0],
    [0,0,8,0,7,4,0,1,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,9,0,0,0,6,8,5]
]

extreme_board_2 = [
    [0,0,0,1,6,4,0,0,0],
    [0,0,0,3,0,0,0,0,7],
    [0,0,0,8,0,0,2,0,3],
    [0,2,0,0,0,0,0,9,5],
    [0,8,0,0,0,6,0,0,0],
    [0,0,3,0,9,0,0,0,0],
    [0,0,0,0,0,0,4,0,0],
    [6,0,0,0,8,0,1,0,0],
    [1,0,4,0,0,0,0,3,0]
]

extreme_board_3 = [
    [0,0,2,5,0,0,8,0,4],
    [0,0,1,0,0,0,0,0,0],
    [4,0,0,8,0,0,0,0,0],
    [0,1,0,0,0,9,3,8,0],
    [0,3,6,0,0,0,0,7,0],
    [0,0,4,0,3,0,0,0,0],
    [0,0,0,0,0,6,0,0,0],
    [0,0,0,3,4,0,0,0,1],
    [6,7,0,0,0,0,0,0,9]
]
board_16x16 = [
    [ 8,  9,  0,  0,   15, 16,  6,  3,    11,  7, 14,  2,   10, 12,  0, 13],
    [ 2, 16,  0, 10,   13,  9,  0,  0,    12,  5,  1,  6,    3, 14,  0,  4],
    [ 0,  0, 11, 13,    0,  0, 12,  8,     3, 10,  4, 16,   15,  0,  9,  6],
    [ 3, 12,  6, 14,   10,  4,  5,  0,    13,  0, 15,  9,    0,  0,  0,  0],

    [ 1, 14, 12,  9,    5,  6,  4,  0,     8, 13,  2,  0,   11, 10,  0,  0],
    [ 4,  7,  0,  0,   16,  0,  1,  0,    14,  0,  0,  0,    6,  0,  0,  8],
    [ 0, 15,  0,  5,    8,  0, 11,  0,     6,  0,  0, 12,    0,  0, 14,  3],
    [ 0,  0, 13,  0,   14,  3,  9,  0,     0,  1,  0,  5,    2,  0,  7, 12],

    [ 0,  0,  7,  3,     6, 10,  0, 15,     1,  9,  0, 14,    12,  8,  0,  2],
    [12,  1,  0, 16,    11,  7,  2, 14,     0,  0,  6,  0,     0,  3, 10,  0],
    [ 5,  2,  0,  0,     4,  0,  3,  9,     0, 12, 11,  7,     0,  0,  1, 16],
    [14,  6,  0,  0,     0,  0,  8,  1,     0,  0,  0, 13,     7, 11, 15,  9],

    [15, 13,  0,  7,     0,  0, 10,  4,     0,  0,  0,  0,     1, 16,  0, 14],
    [ 0,  3,  0,  0,     7,  1, 15,  5,     9,  6, 10,  0,     8, 13,  0,  0],
    [ 0,  4,  1,  6,     2,  8,  0, 16,     0, 14, 12, 15,     0,  0,  0,  0],
    [ 9,  0,  2,  8,     0, 11, 14,  0,     5,  0, 13,  1,     4, 15, 12,  7]
]

board_25x25 = [
    ['V', '', 'R', '', '', 'U', 'P', 'Y', 'X', 'J', 'O', 'W', 'B', '', 'N', 'E', 'C', 'M', '', 'K', '', 'G', '', 'L', ''],
    ['', '', 'F', 'O', 'B', 'L', '', 'M', 'T', 'N', 'D', '', '', '', '', '', '', 'X', 'Q', 'G', '', 'W', 'J', 'C', 'Y'],
    ['E', '', '', '', 'H', 'C', 'R', 'B', '', 'D', '', 'T', '', 'K', 'F', 'U', 'P', 'Y', '', '', 'V', '', 'M', 'A', ''],
    ['L', 'K', 'M', '', 'W', '', 'A', '', '', '', 'G', '', 'U', 'R', '', 'N', '', 'J', '', 'I', 'P', 'B', '', '', ''],
    ['', 'J', '', '', 'P', 'I', '', '', 'W', 'V', '', '', '', 'M', 'C', '', 'L', 'H', '', '', 'N', 'K', '', 'D', 'R'],
    ['S', 'Y', 'L', '', 'N', 'J', 'T', 'K', 'M', 'E', 'U', 'F', 'V', '', 'R', '', 'G', '', '', 'X', 'I', '', '', 'P', 'C'],
    ['', '', '', '', 'E', '', 'B', '', '', 'X', '', 'K', 'W', '', '', 'S', '', 'A', 'I', '', 'F', 'N', '', 'Y', ''],
    ['', 'C', 'J', '', 'R', 'V', '', 'P', 'I', 'F', 'X', '', 'G', '', 'Y', '', 'K', 'N', 'M', '', 'D', 'L', 'B', 'W', ''],
    ['X', 'M', '', 'I', 'Q', 'W', '', 'H', 'D', 'C', 'A', '', '', 'T', 'B', 'L', 'Y', 'F', '', 'P', '', 'S', 'K', 'V', 'G'],
    ['B', 'P', '', 'F', '', 'Q', 'Y', '', '', '', 'N', 'C', 'I', 'L', '', '', 'E', '', '', 'D', '', '', 'R', '', 'M'],
    ['', '', 'C', '', 'L', 'E', 'D', '', '', 'I', 'M', 'R', '', '', '', '', 'A', '', '', 'J', '', 'P', 'W', '', ''],
    ['D', '', 'S', 'U', 'Y', 'N', 'V', 'F', '', 'W', 'B', '', 'C', '', '', 'X', 'H', 'P', '', 'T', '', 'J', 'E', 'M', 'Q'],
    ['', '', 'P', '', '', '', 'C', 'J', '', 'H', '', 'N', 'S', 'V', '', 'O', '', 'G', 'Y', '', '', '', 'L', '', ''],
    ['J', 'A', 'V', 'M', '', 'T', '', 'L', 'P', 'Y', '', '', 'D', '', 'Q', 'C', '', 'I', 'E', 'R', 'G', 'F', 'N', '', 'B'],
    ['', '', 'W', 'B', '', 'M', '', '', 'A', '', '', '', '', 'P', 'J', 'K', '', '', 'F', 'N', 'C', '', 'Y', '', ''],
    ['P', '', 'I', '', '', 'R', '', '', 'N', '', '', 'L', 'H', 'U', 'S', '', '', '', 'J', 'F', '', 'T', '', 'Q', 'A'],
    ['U', 'B', 'O', 'L', '', 'K', '', 'T', 'J', 'M', 'V', 'Q', '', '', 'D', 'G', 'I', 'S', '', 'Y', 'W', 'R', '', 'F', 'P'],
    ['', 'Q', 'E', 'S', 'A', '', 'I', 'U', 'V', '', 'Y', '', 'P', '', 'T', 'B', 'X', 'R', '', 'W', 'K', '', 'D', 'G', ''],
    ['', 'V', '', 'J', 'D', '', 'W', 'C', '', 'A', '', '', 'R', 'B', '', 'P', '', '', 'K', '', 'M', '', '', '', ''],
    ['K', 'H', '', '', 'T', 'F', '', '', 'O', '', 'W', '', 'J', 'E', 'A', 'M', 'D', 'L', 'C', 'U', 'X', '', 'I', 'B', 'N'],
    ['T', 'X', '', 'E', 'I', '', '', 'N', 'C', '', 'R', 'V', '', '', '', 'D', 'M', '', '', 'A', 'B', '', '', 'H', ''],
    ['', '', '', 'Y', 'V', 'D', '', 'X', '', 'T', '', 'O', 'M', '', 'U', '', '', '', 'H', '', 'Q', '', 'P', 'N', 'W'],
    ['', 'L', 'A', '', 'J', '', '', 'V', 'Q', 'S', 'C', 'D', '', 'W', '', 'F', '', 'B', 'P', 'O', 'T', '', '', '', 'X'],
    ['M', 'F', 'D', 'Q', '', 'B', 'G', 'W', '', '', '', '', '', '', 'P', 'Y', 'S', 'T', '', 'L', 'R', 'C', 'V', '', ''],
    ['', 'S', '', 'P', '', 'A', '', 'I', 'R', 'K', 'T', '', 'Y', 'G', 'X', 'J', 'Q', 'C', 'U', 'V', '', '', 'F', '', 'D']
]


def generate_solved_board(size) -> list[list[int]]:
    random_board = [[0] * size for _ in range(size)]
    random_board = dfs.DFS_random(random_board,size)
    return random_board

def remove_numbers(board,difficulty):
    size = len(board)
    puzzle=copy.deepcopy(board)
    nums_to_delete=(difficulty*size)
    for _ in range(nums_to_delete):
        r=random.randrange(0,size)
        c=random.randrange(0,size)
        puzzle[r][c]=0
    return puzzle

def generate_random_board(size) -> list[list[int]]:
    new_random_board=generate_solved_board(size)
    temp=copy.deepcopy(new_random_board)
    temp=remove_numbers(temp,5)
    new_random_board=copy.deepcopy(temp)
    if not dfs.DFS(temp):
        return generate_random_board(size)
    return new_random_board

# new_board=generate_random_board(9)
def visualize_board(board):
    for i, row in enumerate(board):
        if i % 3 == 0:
            print("+=======+=======+=======+")
        row_str = ""
        for j, num in enumerate(row):
            if j % 3 == 0:
                row_str += "| "
            cell = str(num) if num != 0 else "."
            row_str += cell + " "
        row_str += "|"
        print(row_str)
    print("+=======+=======+=======+")

# visualize_board(new_board)
def get_test_boards():
    """Returns 3 boards per difficulty level with 3 difficulties in total.
    They are only used for testing purposes and not meant for training."""
    return [medium_board_1, medium_board_2, medium_board_3,
            hard_board_1, hard_board_2, hard_board_3,
            extreme_board_1, extreme_board_2, extreme_board_3]