import copy
import random

import search as search

# medium boards have 36-38 filled cells.
medium_board_1 = [
    [0,2,0,0,0,0,0,3,1],
    [7,0,0,0,0,3,0,0,0],
    [0,0,0,1,4,0,2,9,0],
    [0,5,2,7,6,4,0,1,8],
    [0,6,3,0,1,2,7,5,9],
    [0,7,8,0,0,0,4,0,0],
    [2,0,0,3,7,0,0,0,5],
    [0,1,0,0,0,0,9,0,0],
    [5,4,0,0,8,1,0,0,0]]

medium_board_2 = [
    [0,0,9,0,0,0,0,0,7],
    [0,0,4,6,5,0,0,1,3],
    [3,0,6,0,0,7,0,0,0],
    [2,3,1,0,6,0,0,0,0],
    [8,0,5,3,0,0,0,6,0],
    [4,6,0,1,0,9,5,0,0],
    [0,0,0,2,9,6,0,0,5],
    [0,4,3,5,0,1,7,2,6],
    [0,5,0,7,0,0,8,0,1]
]

medium_board_3 = [
    [0,0,5,0,0,0,2,1,0],
    [1,9,6,2,8,4,7,5,3],
    [0,3,0,1,5,0,4,0,6],
    [3,0,8,0,0,0,0,5,0],
    [4,0,0,0,6,3,0,0,0],
    [5,0,1,9,2,0,3,7,4],
    [0,0,0,0,0,2,0,5,0],
    [0,5,0,0,3,0,0,6,0],
    [0,1,3,0,4,0,0,0,0]
]

# hard boards have 32 filled cells.
hard_board_1 = [
    [6,8,0,3,7,0,0,0,0],
    [3,0,7,0,0,1,0,6,0],
    [0,0,0,2,6,0,0,0,7],
    [0,0,0,5,0,0,0,0,0],
    [5,4,2,7,1,3,0,0,0],
    [0,0,0,2,0,0,5,4,0],
    [7,1,0,0,5,0,2,0,0],
    [0,5,9,6,0,7,0,0,4],
    [8,0,0,0,0,0,0,0,5]
]

hard_board_2 = [
    [0,3,1,0,7,4,8,0,0], 
    [6,0,0,0,0,0,3,0,0], 
    [4,5,0,3,0,0,0,9,0], 
    [2,0,4,0,0,0,7,5,0], 
    [7,6,0,4,2,0,0,0,0], 
    [0,0,0,9,0,7,4,0,0], 
    [0,0,0,0,3,0,0,0,0], 
    [3,8,9,5,4,2,0,0,0], 
    [0,0,0,0,9,0,0,3,8]
]

hard_board_3 = [
    [3,0,8,5,2,0,0,0,0],
    [0,5,2,0,0,0,6,0,8],
    [0,0,0,9,0,8,0,0,5],
    [0,0,3,0,0,0,0,0,4],
    [6,0,5,4,0,0,9,0,0],
    [4,1,0,0,8,5,0,0,7],
    [0,0,0,0,9,0,4,7,0],
    [0,0,0,0,4,0,0,0,0],
    [7,9,4,6,5,2,0,0,0]
]

# extreme boards have 22-23 filled cells.
extreme_board_1 = [
    [3,4,0,0,0,1,0,0,0],
    [0,2,0,0,0,9,0,0,0],
    [0,0,0,5,0,0,0,7,0],
    [0,0,0,0,0,3,1,0,7],
    [6,8,0,0,0,0,3,0,2],
    [0,0,0,0,0,0,0,6,0],
    [0,0,8,0,7,4,0,1,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,9,0,0,0,6,8,5]
]

extreme_board_2 = [
    [0,0,0,1,6,4,0,0,0],
    [0,0,0,3,0,0,0,0,7],
    [0,0,0,8,0,0,2,0,3],
    [0,2,0,0,0,0,0,9,5],
    [0,8,0,0,0,6,0,0,0],
    [0,0,3,0,9,0,0,0,0],
    [0,0,0,0,0,0,4,0,0],
    [6,0,0,0,8,0,1,0,0],
    [1,0,4,0,0,0,0,3,0]
]

extreme_board_3 = [
    [0,0,2,5,0,0,8,0,4],
    [0,0,1,0,0,0,0,0,0],
    [4,0,0,8,0,0,0,0,0],
    [0,1,0,0,0,9,3,8,0],
    [0,3,6,0,0,0,0,7,0],
    [0,0,4,0,3,0,0,0,0],
    [0,0,0,0,0,6,0,0,0],
    [0,0,0,3,4,0,0,0,1],
    [6,7,0,0,0,0,0,0,9]
]
board_16x16=[
    [ 0,  0,  0, 12,   0,  0, 15,  0,    0,  0,  0,  0,   1,  0,  0,  0],
    [ 0,  0,  0,  0,   0,  2,  0,  0,    0, 14,  0,  0,   0,  0,  0,  0],
    [ 9,  0,  0,  0,   0,  0,  0,  8,    0,  0,  6,  0,   0,  0,  0,  3],
    [ 0,  0,  6,  0,   0, 12,  0,  0,    0,  0,  0,  0,   0,  5,  0,  0],

    [ 0, 13,  0,  0,   7,  0,  0,  0,    2,  0,  0,  0,   0,  0, 10,  0],
    [ 0,  0,  5,  0,   0,  0,  0,  3,    0,  0,  0, 15,   0,  0,  7,  0],
    [ 0,  0,  0,  0,   0, 14,  0,  0,    0,  0,  0,  0,   6,  0,  0,  0],
    [ 0,  0,  0,  0,   0,  0,  0,  0,    0,  0, 12,  0,   0,  0,  0,  0],

    [ 0,  0,  0,  0,   0,  0,  0,  0,    0,  0,  0,  0,   0,  0,  0,  0],
    [ 0,  0,  0, 11,   0,  0,  0,  0,    0,  0,  0,  0,   0,  0,  0,  0],
    [ 0,  0,  0,  0,   0,  0,  0,  0,   13,  0,  0,  0,   0,  0,  0,  0],
    [ 0,  0,  0,  0,   0,  0,  0,  0,    0,  0,  0,  0,   0,  0,  0,  0],

    [ 4,  0,  0,  0,   0,  0,  0,  0,    0,  0,  0,  0,   0,  0,  0,  0],
    [ 0,  0,  0,  0,   0,  0,  0,  0,    0,  0,  0,  0,   0,  0,  0,  0],
    [ 0,  0,  0,  0,   0,  0,  0,  0,    0,  0,  0,  0,   0,  0,  0,  0]
]

board_25x25=[
    [1, 0, 0, 0, 0,   2, 0, 0, 0, 0,   3, 0, 0, 0, 0,   4, 0, 0, 0, 0,   5, 0, 0, 0, 0],
    [0, 6, 0, 0, 0,   0, 7, 0, 0, 0,   0, 8, 0, 0, 0,   0, 9, 0, 0, 0,   0, 10, 0, 0, 0],
    [0, 0, 11, 0, 0,  0, 0, 12, 0, 0,  0, 0, 13, 0, 0,  0, 0, 14, 0, 0,  0, 0, 15, 0, 0],
    [0, 0, 0, 16, 0,  0, 0, 0, 17, 0,  0, 0, 0, 18, 0,  0, 0, 0, 19, 0,  0, 0, 0, 20, 0],
    [0, 0, 0, 0, 21,  0, 0, 0, 0, 22,  0, 0, 0, 0, 23,  0, 0, 0, 0, 24,  0, 0, 0, 0, 25],

    [2, 0, 0, 0, 0,   3, 0, 0, 0, 0,   4, 0, 0, 0, 0,   5, 0, 0, 0, 0,   6, 0, 0, 0, 0],
    [0, 7, 0, 0, 0,   0, 8, 0, 0, 0,   0, 9, 0, 0, 0,   0, 10, 0, 0, 0,  0, 11, 0, 0, 0],
    [0, 0, 12, 0, 0,  0, 0, 13, 0, 0,  0, 0, 14, 0, 0,  0, 0, 15, 0, 0,  0, 0, 16, 0, 0],
    [0, 0, 0, 17, 0,  0, 0, 0, 18, 0,  0, 0, 0, 19, 0,  0, 0, 0, 20, 0,  0, 0, 0, 21, 0],
    [0, 0, 0, 0, 22,  0, 0, 0, 0, 23,  0, 0, 0, 0, 24,  0, 0, 0, 0, 25,  0, 0, 0, 0, 1],

    [3, 0, 0, 0, 0,   4, 0, 0, 0, 0,   5, 0, 0, 0, 0,   6, 0, 0, 0, 0,   7, 0, 0, 0, 0],
    [0, 8, 0, 0, 0,   0, 9, 0, 0, 0,   0, 10, 0, 0, 0,  0, 11, 0, 0, 0,  0, 12, 0, 0, 0],
    [0, 0, 13, 0, 0,  0, 0, 14, 0, 0,  0, 0, 15, 0, 0,  0, 0, 16, 0, 0,  0, 0, 17, 0, 0],
    [0, 0, 0, 18, 0,  0, 0, 0, 19, 0,  0, 0, 0, 20, 0,  0, 0, 0, 21, 0,  0, 0, 0, 22, 0],
    [0, 0, 0, 0, 23,  0, 0, 0, 0, 24,  0, 0, 0, 0, 25,  0, 0, 0, 0, 1,   0, 0, 0, 0, 2],

    [4, 0, 0, 0, 0,   5, 0, 0, 0, 0,   6, 0, 0, 0, 0,   7, 0, 0, 0, 0,   8, 0, 0, 0, 0],
    [0, 9, 0, 0, 0,   0, 10, 0, 0, 0,  0, 11, 0, 0, 0,  0, 12, 0, 0, 0,  0, 13, 0, 0, 0],
    [0, 0, 14, 0, 0,  0, 0, 15, 0, 0,  0, 0, 16, 0, 0,  0, 0, 17, 0, 0,  0, 0, 18, 0, 0],
    [0, 0, 0, 19, 0,  0, 0, 0, 20, 0,  0, 0, 0, 21, 0,  0, 0, 0, 22, 0,  0, 0, 0, 23, 0],
    [0, 0, 0, 0, 24,  0, 0, 0, 0, 25,  0, 0, 0, 0, 1,   0, 0, 0, 0, 2,   0, 0, 0, 0, 3],

    [5, 0, 0, 0, 0,   6, 0, 0, 0, 0,   7, 0, 0, 0, 0,   8, 0, 0, 0, 0,   9, 0, 0, 0, 0],
    [0, 10, 0, 0, 0,  0, 11, 0, 0, 0,  0, 12, 0, 0, 0,  0, 13, 0, 0, 0,  0, 14, 0, 0, 0],
    [0, 0, 15, 0, 0,  0, 0, 16, 0, 0,  0, 0, 17, 0, 0,  0, 0, 18, 0, 0,  0, 0, 19, 0, 0],
    [0, 0, 0, 20, 0,  0, 0, 0, 21, 0,  0, 0, 0, 22, 0,  0, 0, 0, 23, 0,  0, 0, 0, 24, 0],
    [0, 0, 0, 0, 25,  0, 0, 0, 0, 1,   0, 0, 0, 0, 2,   0, 0, 0, 0, 3,   0, 0, 0, 0, 4]
]
def generate_solved_board(size) -> list[list[int]]:
    random_board = [[0] * size for _ in range(9)]
    random_board = search.DFS_random(random_board)
    return random_board
def remove_numbers(board,difficulty):
    size = len(board)
    puzzle=copy.deepcopy(board)
    nums_to_delete=(difficulty*size)
    for num in range(nums_to_delete):
        r=random.randrange(0,size)
        c=random.randrange(0,size)
        puzzle[r][c]=0
    return puzzle
def generate_random_board(size) -> list[list[int]]:
    new_random_board=generate_solved_board(size)
    temp=copy.deepcopy(new_random_board)
    remove_numbers(temp,5)
    if not search.DFS(temp):
        return None
    return new_random_board

new_board=generate_random_board(9)
def visualize_board(board):
    for i, row in enumerate(board):
        if i % 3 == 0:
            print("+=======+=======+=======+")
        row_str = ""
        for j, num in enumerate(row):
            if j % 3 == 0:
                row_str += "| "
            cell = str(num) if num != 0 else "."
            row_str += cell + " "
        row_str += "|"
        print(row_str)
    print("+=======+=======+=======+")
visualize_board(new_board)
def get_test_boards():
    """Returns 3 boards per difficulty level with 3 difficulties in total.
    They are only used for testing purposes and not meant for training."""
    return [medium_board_1, medium_board_2, medium_board_3,
            hard_board_1, hard_board_2, hard_board_3,
            extreme_board_1, extreme_board_2, extreme_board_3]

def get_random_board():
    # NOTE: this could be useful to backtrack and make sure that the algorithm only has one solution: http://en.wikipedia.org/wiki/Dancing_Links
    # ALGORITHM: https://stackoverflow.com/a/7280517/14395043 maybe??
    return medium_board_1